# -----------------------------------------------
# CONFIGURAÇÕES BÁSICAS
# -----------------------------------------------
spring.application.name=adopetme-monolitic-backend
# A porta é lida da variável de ambiente ou usa 8081 como padrão
server.port=${SERVER_PORT:8081}
spring.docker.compose.enabled=false
logging.level.root=info

# -----------------------------------------------
# CONFIGURAÇÕES DO POSTGRESQL (FALLBACK)
# -----------------------------------------------
# Estas configurações serão sobrescritas pelas variáveis de ambiente
# passadas pelo docker-compose.yml (SPRING_DATASOURCE_URL, etc.)
# O 'localhost:5433' é o padrão para conectar ao banco do Docker de fora do container.
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5433/adopetme_db}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
# O padrão 'adopetmedev' corresponde ao .env que discutimos.
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:adopetmedev}

# Dialeto e comportamento do Hibernate
spring.jpa.properties.hibernate.dialect=${SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT:org.hibernate.dialect.PostgreSQLDialect}
# 'validate' é o correto, pois o Flyway gerencia o schema.
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:validate}
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.open-in-view=false

# -----------------------------------------------
# CONFIGURAÇÕES DO FLYWAY (MIGRATIONS)
# -----------------------------------------------
# Garante que o Flyway esteja ativo e saiba onde encontrar os scripts SQL.
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration

# -----------------------------------------------
# CONFIGURAÇÕES DO GOOGLE OAUTH2
# -----------------------------------------------
# !!! NÃO COLOQUE SEGREDOS AQUI. ELES DEVEM VIR DO AMBIENTE !!!
# Você precisará adicionar GOOGLE_CLIENT_ID e GOOGLE_CLIENT_SECRET
# ao seu docker-compose.yml e ao arquivo .env
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email

# -----------------------------------------------
# CONFIGURAÇÕES PERSONALIZADAS (FRONTEND, CORS E JWT)
# -----------------------------------------------
# !!! NÃO COLOQUE SEGREDOS AQUI. ELES DEVEM VIR DO AMBIENTE !!!
app.oauth2.authorizedRedirectUris=${APP_OAUTH2_REDIRECT_URI:http://localhost:3030/auth/oauth2/redirect}
app.oauth2.allowed-origins=${APP_CORS_ALLOWED_ORIGINS:http://localhost:3030}

# Você precisará adicionar APP_JWT_SECRET ao seu docker-compose.yml e .env
app.jwt.secret=${APP_JWT_SECRET}
app.jwt.expiration-in-ms=${APP_JWT_EXPIRATION_MS:86400000}

